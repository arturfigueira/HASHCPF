package com.ca.datamasker.custom;

import java.util.List;
import java.util.Objects;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 * Factory class to help creating synthetic CPF, valid or not,
 * to be consumed by our tests
 */
class MockCPFFactory {

    private FormatMask mask = FormatMask.NOTMASK;
    private CPFSize size = CPFSize.REGULAR;

    /**
     * Create a custom factory
     * @param mask choose whether the CPFs, generated by this factory, will have mask or not
     * @param size choose if will be a valid CPF size, smaller or bigger.
     */
    public MockCPFFactory(final FormatMask mask, final CPFSize size) {
        this.mask = mask;
        this.size = size;
    }

    /**
     * Creates a default Factory that will generates valid, without mask, CPFs
     */
    public MockCPFFactory() { }

    /**
     * Generates a totally synthetic CPF. This CPF can also be invalid.
     * It depends on the configuration of this factory.
     * @return
     */
    public String getACPF(){
        final IntStream ints = (new Random().ints(this.size.getSize(), 0, 9));
        final List<Integer> cpfColumns = ints.boxed().collect(Collectors.toList());

        final String unformattedValue = cpfColumns.stream().map(Objects::toString).collect(Collectors.joining(""));

        final CPF cpf = new CPF(unformattedValue);

        return cpf.toString(this.mask.getMaskFormat());
    }
}

enum FormatMask {
    WITHMASK("###.###.###-##"), NOTMASK("###########");

    private final String maskFormat;

    FormatMask(String maskFormat) {
        this.maskFormat = maskFormat;
    }

    public String getMaskFormat() {
        return maskFormat;
    }
}

enum CPFSize {
    LARGER(12), SMALLER(5), REGULAR(9);

    private final int size;

    CPFSize(int size) {
        this.size = size;
    }

    public int getSize() {
        return size;
    }
}

