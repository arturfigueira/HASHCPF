package com.ca.datamasker.custom;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

/**
 * Factory class to help creating synthetic CPF, valid or not,
 * to be consumed by our tests
 */
class CPFFactory {

    private FORMATMASK mask = FORMATMASK.NOTMASK;
    private SIZE size = SIZE.REGULAR;

    /**
     * Create a custom factory
     * @param mask choose whether the CPFs, generated by this factory, will have mask or not
     * @param size choose if will be a valid CPF size, smaller or bigger.
     */
    public CPFFactory(final FORMATMASK mask, final SIZE size) {
        this.mask = mask;
        this.size = size;
    }

    /**
     * Creates a default Factory that will generates valid, without mask, CPFs
     */
    public CPFFactory() { }

    /**
     * Generates a totally synthetic CPF
     * @return
     */
    public String getACPF(){
        final IntStream ints = (new Random().ints(this.size.getSize(), 0, 9));
        final List<Integer> cpfColumns = ints.boxed().collect(Collectors.toList());

        final int firstCheckDigit = sumColumnsByWeight(cpfColumns);
        cpfColumns.add(firstCheckDigit);

        final int secondCheckDigit = sumColumnsByWeight(cpfColumns);
        cpfColumns.add(secondCheckDigit);

        return cpfColumns.stream().map(Objects::toString).collect(Collectors.joining(""));
    }

    private int sumColumnsByWeight(final List<Integer> cpfColumns) {
        int sumColumns = 0;
        for(int i=0; i<cpfColumns.size(); i++){
            sumColumns+=(cpfColumns.size() + 1 - i) * cpfColumns.get(i);
        }
        return calCheckDigit(sumColumns);
    }


    private int calCheckDigit(final int number){
        final int modular = (number * 10) % 11;
        return (modular == 10) ? 0 : modular;
    }

    private int getStartWeight(){
        return this.size.getSize()+1;
    }
}

enum FORMATMASK{
    WITHMASK("%d%d%d.%d%d%d.%d%d%d-%d%d"), NOTMASK("%d%d%d%d%d%d%d%d%d%d%d");

    private final String maskFormat;

    FORMATMASK(String maskFormat) {
        this.maskFormat = maskFormat;
    }

    public String getMaskFormat() {
        return maskFormat;
    }
}

enum SIZE{
    LARGER(12), SMALLER(5), REGULAR(9);

    private final int size;

    SIZE(int size) {
        this.size = size;
    }

    public int getSize() {
        return size;
    }
}

